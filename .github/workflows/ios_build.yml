name: iOS Build with secrets

on:
  push:
    branches: [ fakeDummyRepo ]
  pull_request:
    branches: [ fakeDummyRepo ]
  workflow_dispatch:
    inputs:
      env_file:
        description: 'Env file'
        required: true
      app_file:
        description: 'Appfile'
        required: true
      match_file:
        description: 'Matchfile value'
        required: true
      deployment_id:
        description: 'Deployment id'
        required: true
      client_app:
        description: 'Client app slug'
        required: true
      app_icon:
        description: 'App icon'
        required: true

jobs:
  build:
    runs-on: 'macos-latest'
    steps:
      - uses: actions/checkout@v4
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2.2' # or the version you need
      - name: Set up xcode
        uses: maxim-lobanov/setup-xcode@v1.6.0
        with:
          xcode-version: 'latest-stable'

      - name: Set .env.default
        run: |
          rm fastlane/.env.default
          echo "${{ github.event.inputs.env_file}}" > fastlane/.env.default
          cat fastlane/.env.default

      - name: display fastlane file
        run: |
          cat fastlane/Fastfile

      - name: Set Appfile
        run: |
          rm fastlane/AppFile
          echo "${{ github.event.inputs.app_file}}" > fastlane/AppFile
          cat fastlane/AppFile

      - name: Set Matchfile
        run: |
          rm fastlane/Matchfile
          echo "${{ github.event.inputs.match_file}}" > fastlane/Matchfile
          cat fastlane/Matchfile

      # Generating app icon with different sizes
      - name: Set up ImageMagick
        run: brew install imagemagick

      - name: Set up splash icon
        run: |
          curl ${{ github.event.inputs.app_icon }} -o BuildUp/Resources/Assets/Assets.xcassets/Splash/logo.imageset/logo.png

      - name: Run Image Resize Script
        run: |
          input_image_url=${{ github.event.inputs.app_icon}}
          output_folder="BuildUp/Resources/Assets/Assets.xcassets/AppIcon.appiconset"

          sizes=("ItunesArtwork:1024x1024")

          find "$GITHUB_WORKSPACE/$output_folder/" -type f -name "*.png" -exec rm -f {} \;

          ls -R "$GITHUB_WORKSPACE/$output_folder/"

          for size in "${sizes[@]}"; do
              size_name="${size%%:*}"
              size_dimensions="${size##*:}!"
              output_name="${size_name}.png"
              convert <(curl -sL "$input_image_url") -resize "$size_dimensions" "$GITHUB_WORKSPACE/$output_folder/$output_name"
          done

          ls -R "$GITHUB_WORKSPACE/$output_folder/"

      - name: Lanuch simulator
        uses: futureware-tech/simulator-action@v3
        with:
         model: 'iPhone 15'

      - name: Install dependencies
        run: |
          gem install bundler
          pod install
          bundle update --full-index
        
      - name: Run tests
        run: |
          xcodebuild test -scheme BuildUpUITests -workspace BuildUp.xcworkspace -destination 'platform=iOS Simulator,name=iPhone 15,OS=17'

      - name: Execute Fastlane
        env:
          FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASS }}
        run: |
          fastlane upload_app
        
      - name: Send Failure Notification
        if: failure()
        run: |
          echo "CI/CD pipeline failed. Sending API request..."
          PAYLOAD=$(jq -n \
          --arg auth "${{ github.event.inputs.client_app }}" \
          --arg deployment_id "${{ github.event.inputs.deployment_id }}" \
          --arg run_number "${GITHUB_RUN_NUMBER}" \
          '{authorization: $auth, workflow_run_number: $run_number, deployment_id: $deployment_id}')
          curl -X POST -H "Content-Type: application/json" \
            -d "$PAYLOAD" \
            "https://ecommerce.buildupp.co/api/v1/apps/deploy/ios/publish-failure"

      - name: Send Success Notification
        if: success()
        run: |
          echo "CI/CD pipeline failed. Sending API request..."
          max_attempts=3
          attempt=1
          sleep_seconds=5
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt of $max_attempts"
            curl -X POST -H "Content-Type: multipart/form-data" \
                 -F "authorization=${{ github.event.inputs.client_app }}" \
                 -F "deployment_id=${{ github.event.inputs.deployment_id }}" \
                 -F "workflow_run_number=${GITHUB_RUN_NUMBER}" \
                 "https://ecommerce.buildupp.co/api/v1/apps/deploy/ios/publish-success" && break
            echo "curl command failed, retrying in $sleep_seconds seconds..."
            sleep $sleep_seconds
            attempt=$(( attempt + 1 ))
          done
          if [ $attempt -gt $max_attempts ]; then
            echo "curl command failed after $max_attempts attempts"
            exit 1
          fi

